#include <queue>
#include <cstring>
#include <iostream>

using namespace std;
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
    bool visited_[101];
public:
    Node* cloneGraph(Node* node) {
        if(node == NULL)
            return NULL;
        
        Node* root = new Node(node->val);
        BFS(root, node);
        
        //memset(visited_, false, sizeof(visited_));
        //DFS_for_check(root);
        
        return root;
    }
    
    void BFS(Node* root, Node* input){
        bool visited[101];
        Node* nodes[101], curr_node;
        
        queue<Node*> q;
        q.push(input);
        
        memset(visited, false, sizeof(visited));
        visited[input->val] = true;
        nodes[input->val] = root;
        
        while(!q.empty()){
            Node* curr = q.front();
            int curr_val = curr->val;
            q.pop();
            
            for(Node* next : curr->neighbors){      
                if(!visited[next->val]){         
                    Node* node = new Node(next->val);
                    nodes[next->val] = node;
                    
                    visited[next->val] = true;
                    q.push(next);
                }
                nodes[curr_val]->neighbors.push_back(nodes[next->val]);
            }
        }
    }
    
    //func for checking neighbor of nodes
    void DFS_for_check(Node* curr){     
        cout << curr->val << ": ";
        visited_[curr->val] = true;
        
        for(Node* node : curr->neighbors){
            cout << node->val << " ";            
        }
        cout << "\n";
        
        for(Node* node : curr->neighbors){
            if(!visited_[node->val])
                DFS_for_check(node);
        }
    }
};
